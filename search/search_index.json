{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Private Documentation!","text":"<p>Here you will find all the relevant information about my secret project.Use the navigation on the left or the tabs at the top to explore.</p>"},{"location":"about/","title":"About this Project","text":"<p>This project is developed by [Carlos Garay] for private purposes.</p>"},{"location":"start-guide/","title":"Quick Start Guide","text":""},{"location":"start-guide/#documenting-the-magik-script-for-smallworld-gis-data-access","title":"Documenting the Magik Script for Smallworld GIS Data Access","text":"<p>This document describes a Magik script that allows interaction with Smallworld GIS databases and datasets.</p>"},{"location":"start-guide/#script-purpose","title":"Script Purpose","text":"<p>The objective of this script is to initialize access to Smallworld GIS databases, select a specific database, and list the available collections (tables or feature classes) within that database, showing both their internal names and their external (description) names.</p>"},{"location":"start-guide/#quick-copy","title":"Quick Copy","text":"<p>For quick interaction with the Magik interpreter, you can copy and paste these code blocks directly.</p> <pre><code>dbs &lt;&lt; gis_program_manager.databases\n</code></pre> <pre><code>print(dbs)\n</code></pre> <pre><code>gis_db &lt;&lt; dbs[:electric]\n</code></pre> <pre><code>print(gis_db.collections)\n</code></pre> <pre><code>_for collection _over gis_db.collections.fast_elements()\n_loop\n    write(collection.name, %tab, collection.external_name)\n_endloop\n</code></pre>"},{"location":"start-guide/#script-steps","title":"Script Steps","text":"<p>Below, each command of the Magik script and its expected output are detailed:</p> <ol> <li> <p>Initializing GIS Databases</p> <p>This command assigns a reference to the GIS database manager to the global variable <code>dbs</code>. If <code>dbs</code> does not exist, the system will ask if you want to create it.</p> <p><pre><code>dbs &lt;&lt; gis_program_manager.databases</code></pre></p> <p>Expected Output (if <code>dbs</code> does not exist):</p> <p><code>Global dbs does not exist: create it? (Y) Definiendo global dbs</code></p> </li> <li> <p>Listing Available Databases</p> <p>To see a list of all configured and accessible GIS databases, copy and paste the following command:</p> <p><pre><code>print(dbs)</code></pre></p> <p>Expected Output:</p> <p><pre><code>hash_table:\n:gnss gnss_dataset(gnss)\n:cymdist gis_ds_view(Cymdist)\n:cis_interface gis_ds_view(Cis_interface)\n:addon gis_ds_view(Addon)\n:electric gis_ds_view(Electric)\n:design_config gis_ds_view(Design_config)\n:design_admin gis_ds_view(Design_admin)\n:task_management gis_ds_view(Task_management)\n:design_work gis_ds_view(Design_work)\n:thematics gis_ds_view(Thematics)\n:dxf gis_ds_view(Dxf)\n:cartografia gis_ds_view(Cartografia)\n:gis gis_ds_view(Gis)</code></pre></p> <ul> <li>Explanation: The output shows a <code>hash_table</code> where each entry represents a database. For example, <code>:electric gis_ds_view(Electric)</code> indicates a database named <code>electric</code> with its associated GIS dataset view.</li> </ul> </li> <li> <p>Selecting a Specific Database</p> <p>This command selects the <code>electric</code> database from the available list in <code>dbs</code> and assigns it to the global variable <code>gis_db</code>. Again, if <code>gis_db</code> does not exist, its creation will be prompted.</p> <p><pre><code>gis_db &lt;&lt; dbs[:electric]</code></pre></p> <p>Expected Output (if <code>gis_db</code> does not exist):</p> <p><code>Global gis_db does not exist: create it? (Y) Definiendo global gis_db</code></p> </li> <li> <p>Listing Collections (Datasets) in the Selected Database</p> <p>To print all collections (which often correspond to \"tables\" or \"feature classes\" in a GIS) contained within the <code>gis_db</code> database (in this case, <code>electric</code>), use the following command:</p> <p><pre><code>print(gis_db.collections)</code></pre></p> <p>Expected Output (fragment):</p> <p><pre><code>hash_table:\n:eo_energy_storage a ds_collection(eo_energy_storage)\n:int!ed_handhole_et_structure_ a ds_collection(int!ed_handhole_et_structure_)\n:schematic_node_annotation a ds_collection(schematic_node_annotation)\n... (numerous collections)</code></pre></p> <ul> <li>Explanation: Similar to the database listing, this output shows a <code>hash_table</code> where each entry is a data collection (<code>ds_collection</code>) within the <code>electric</code> database.</li> </ul> </li> <li> <p>Iterating and Displaying Collection Names and their Descriptions</p> <p>To list the internal name and external name (description) of each collection in the selected database, copy and paste the following loop:</p> <p><pre><code>_for collection _over gis_db.collections.fast_elements()\n_loop\n    write(collection.name, %tab, collection.external_name)\n_endloop</code></pre></p> <p>Expected Output (fragment):</p> <p><pre><code>eo_energy_storage   Almacenamiento de Energ\u00eda\nint!ed_handhole_et_structure_   int!ed_handhole_et_structure_\nschematic_node_annotation   Schematic Node Annotation\nint!eo_energy_sto_eo_energy_sto2    int!eo_energy_sto_eo_energy_sto2\nex_dd!version   ex_dd!version\nint!ed_pole_ed_pole_forei   int!ed_pole_ed_pole_forei\ned_pole_foreign_attachment  Accesorios Exteriores\ndata_correction_type    Data Correction Type\nswg_dsn_free_cancellation   Cancelaci\u00f3n Libre\neo_owner_type_name_catalog  Cat\u00e1logo Nombre de Propiedad\n... (numerous collections with their descriptions)</code></pre></p> <ul> <li>Explanation: This is the most informative part, as it provides a user-readable description of what each internal collection represents. For example, <code>eo_energy_storage</code> is described as \"Almacenamiento de Energ\u00eda\". Many intermediate or relational collections (<code>int!...</code>) may not have a user-friendly external name.</li> </ul> </li> </ol>"},{"location":"start-guide/#conclusion","title":"Conclusion","text":"<p>This Magik script is a fundamental tool for exploring the structure of a Smallworld GIS database, allowing developers and administrators to quickly understand what databases and collections are available and what their purpose is.</p>"}]}